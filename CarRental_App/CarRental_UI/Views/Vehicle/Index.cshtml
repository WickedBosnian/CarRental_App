@using CarRental_DTO;
@model IEnumerable<VehicleDTO>

@{
    ViewData["Title"] = "Vehicles";
    VehicleDTO? FilterVehicle = (VehicleDTO?)ViewData["FilterVehicle"];
    <p>
        <a asp-action="Create" class="btn btn-outline-primary">Create New</a>
    </p>
}

@*Form for searching Vehicles*@
<form asp-controller="Vehicle" asp-action="SearchVehicles" method="get">
    <div class="input-group">

        <input id="vehicleName" name="VehicleName" value="@FilterVehicle?.VehicleName" type="text" class="form-control rounded" style="margin:5px;" placeholder="VehicleName" aria-label="Search" aria-describedby="search-addon" />
        <input id="vehicleManufacturerId" name="VehicleManufacturerId" value="@FilterVehicle?.VehicleManufacturerId" type="text" class="form-control rounded" style="margin:5px;" placeholder="Vehicle Manufacturer" aria-label="Search" aria-describedby="search-addon" />
        <input id="vehicleTypeId" name="VehicleTypeId" value="@FilterVehicle?.VehicleTypeId" type="date" class="form-control rounded" style="margin:5px;" placeholder="Vehicle Type" aria-label="Birthdate" aria-describedby="search-addon" />

        <button type="submit" class="btn btn-outline-primary">Search</button>
    </div>
</form>
<table class="table align-middle mb-0 bg-white table-hover">
    <thead class="bg-light">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.VehicleName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VehicleManufacturer.VehicleManufacturerName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VehicleType.VehicleTypeName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateManufactured)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PricePerDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Color)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.VehicleName)
                </td>
                <td>
                    @if (item.VehicleManufacturer != null)
                    {
                        @Html.DisplayFor(modelItem => item.VehicleManufacturer.VehicleManufacturerName)
                    }
                </td>
                <td>
                    @if (item.VehicleType != null)
                    {
                        @Html.DisplayFor(modelItem => item.VehicleType.VehicleTypeName)
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateManufactured)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PricePerDay)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Color)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.VehicleId" class="btn btn-outline-warning">Edit</a>
                    <a asp-action="Details" asp-route-id="@item.VehicleId" class="btn btn-outline-info">Details</a>
                    <a asp-action="Delete" asp-route-id="@item.VehicleId" class="btn btn-outline-danger">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@*Pagination*@
<nav aria-label="Page navigation example" style="margin-top:10px;">
    <ul class="pagination justify-content-center">
        @*ActionName is used as a parameter that holds name of the Action that is called in current Controller*@
        @{
            string ActionName = "Index";
        }
        @*This part creates Previous button if the current page is not the first page on pagination*@
        @if (ViewBag.PageNumber > 1)
        {
            <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber - 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })" tabindex="-1">Previous</a></li>
        }
        else
        {
            <li class="page-item disabled"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber - 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })" tabindex="-1">Previous</a></li>
        }

        @*This section creates page numbers for pagination between Next and Previous buttons as well as buttons ... that lead to the first or last page in pagination*@
        @{
            @*counter is a variable that is used as a page number, it is always smaller than the current page unless the current page is 1*@
            int counter = ViewBag.PageNumber > 1 ? ViewBag.PageNumber - 1 : ViewBag.PageNumber;

            @*tempMaxPage holds a value of how much page numbers are displayed between Next and Previous buttons, it has a fixed value of 3 for esthetic purpose*@
            int tempMaxPage = ViewBag.MaxPage < 3 ? ViewBag.MaxPage : 3;

            if (ViewBag.PageNumber == ViewBag.MaxPage && ViewBag.PageNumber > 2)
            {
                counter--;
            }

            @*This part creates ... button that leads to the last page in pagination*@
            if (counter > 1)
            {
                <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">...</a></li>
            }

            for (int i = 0; i < tempMaxPage; i++)
            {
                if (ViewBag.PageNumber == counter)
                {
                    <li class="page-item active"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = @counter, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">@counter</a></li>
                }
                else
                {
                    <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = @counter, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">@counter</a></li>
                }

                counter++;
            }

            @*This part creates ... button that leads to the first page in pagination*@
            if (counter - 1 < ViewBag.MaxPage && ViewBag.MaxPage > 2)
            {
                <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.MaxPage, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">...</a></li>
            }
        }

        @*This part creates Next button if the current page is not the last page on pagination*@
        @if (ViewBag.PageNumber < ViewBag.MaxPage)
        {
            <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber + 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">Next</a></li>
        }
        else
        {
            <li class="page-item disabled"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber + 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">Next</a></li>
        }
    </ul>
</nav>