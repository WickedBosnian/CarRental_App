@using CarRental_DTO;
@model IEnumerable<ReservationDTO>

@{
    ViewData["Title"] = "Reservations";
    ReservationDTO? FilterReservation = (ReservationDTO?)ViewData["FilterReservation"];
    IEnumerable<VehicleDTO>? vehicles = (IEnumerable<VehicleDTO>?)ViewData["Vehicles"];
    IEnumerable<ClientDTO>? clients = (IEnumerable<ClientDTO>?)ViewData["Clients"];
    <p>
        <a asp-action="Create" class="btn btn-outline-primary">Create New</a>
    </p>
}

@*Form for searching Reservations*@
<form asp-controller="Reservation" asp-action="SearchReservations" method="get">
    <div class="input-group">

        <input id="reservationDateFrom" name="ReservationDateFrom" value="@FilterReservation?.ReservationDateFrom?.ToString("yyyy-MM-dd")" type="date" class="form-control rounded" style="margin:5px;" aria-label="Search" aria-describedby="search-addon" />
        <input id="reservationDateTo" name="ReservationDateTo" value="@FilterReservation?.ReservationDateTo?.ToString("yyyy-MM-dd")" type="date" class="form-control rounded" style="margin:5px;" aria-label="Search" aria-describedby="search-addon" />

        <select id="vehicleId" name="VehicleID" class="form-control form-control rounded" style="margin:5px;">
            <option selected value="">Vehicles...</option>
            @foreach (VehicleDTO vehicle in vehicles ?? new List<VehicleDTO>())
            {
                if (FilterReservation?.VehicleId == vehicle.VehicleId)
                {
                    <option selected value="@vehicle.VehicleId">@vehicle.VehicleName</option>
                }
                else
                {
                    <option value="@vehicle.VehicleId">@vehicle.VehicleName</option>
                }
            }
        </select>

        <select id="clientId" name="ClientId" class="form-control form-control rounded" style="margin:5px;">
            <option selected value="">Clients...</option>
            @foreach (ClientDTO client in clients ?? new List<ClientDTO>())
            {
                if (FilterReservation?.ClientId == client.ClientId)
                {
                    <option selected value="@client.ClientId">@client.Firstname @client.Lastname (@client.DriverLicenceNumber)</option>
                }
                else
                {
                    <option value="@client.ClientId">@client.Firstname @client.Lastname (@client.DriverLicenceNumber)</option>
                }
            }
        </select>

        <select id="active" name="Active" class="form-select form-control rounded" style="margin:5px;">
            <option selected value="">Status...</option>
            @if (FilterReservation?.Active == true)
            {
                <option selected value="true">Active</option>
            }
            else
            {
                <option value="true">Active</option>
            }
            @if (FilterReservation?.Active == false)
            {
                <option selected value="false">Inactive</option>
            }
            else
            {
                <option value="false">Inactive</option>
            }
        </select>

        <button type="submit" class="btn btn-outline-primary">Search</button>
    </div>
</form>
<table class="table align-middle mb-0 bg-white table-hover">
    <thead class="bg-light">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ReservationDateFrom)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReservationDateTo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Vehicle.VehicleName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Client)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            var rowStyle = "";
            var editButtonClass = "btn btn-outline-info";
            var whiteBackgroundButtonStyle = "";
            if(item.Active == null || item.Active == false){
                rowStyle = "background-color: rgba(255, 0, 0, 0.2);";
                whiteBackgroundButtonStyle = "background-color: white;";
            }
            else if (item.Active != null && item.Active == true && DateTime.Now.Date >= item.ReservationDateTo)
            {
                rowStyle = "background-color: rgba(184, 134, 11, 0.2);";
                whiteBackgroundButtonStyle = "background-color: white;";
            }
            <tr style="@rowStyle">
                <td>
                    @Html.DisplayFor(modelItem => item.ReservationDateFrom)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ReservationDateTo)
                </td>
                <td>
                    @if (item.Vehicle != null)
                    {
                        @Html.DisplayFor(modelItem => item.Vehicle.VehicleName)
                    }
                </td>
                <td>
                    @if (item.Client != null)
                    {
                        <span>@Html.DisplayFor(modelItem => item.Client.Firstname) @Html.DisplayFor(modelItem => item.Client.Lastname) - @Html.DisplayFor(modelItem => item.Client.DriverLicenceNumber)</span>
                    }
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.ReservationId" class="@editButtonClass" style="@whiteBackgroundButtonStyle">Details</a>
                    @if(item.Active != null && item.Active == true)
                    {
                        <a asp-action="Cancel" asp-route-id="@item.ReservationId" style="@whiteBackgroundButtonStyle" class="btn btn-outline-danger">Cancel</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@*Pagination*@
<nav aria-label="Page navigation example" style="margin-top:10px;">
    <ul class="pagination justify-content-center">
        @*ActionName is used as a parameter that holds name of the Action that is called in current Controller*@
        @{
            string ActionName = "Index";
        }
        @*This part creates Previous button if the current page is not the first page on pagination*@
        @if (ViewBag.PageNumber > 1)
        {
            <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber - 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })" tabindex="-1">Previous</a></li>
        }
        else
        {
            <li class="page-item disabled"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber - 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })" tabindex="-1">Previous</a></li>
        }

        @*This section creates page numbers for pagination between Next and Previous buttons as well as buttons ... that lead to the first or last page in pagination*@
        @{
            @*counter is a variable that is used as a page number, it is always smaller than the current page unless the current page is 1*@
            int counter = ViewBag.PageNumber > 1 ? ViewBag.PageNumber - 1 : ViewBag.PageNumber;

            @*tempMaxPage holds a value of how much page numbers are displayed between Next and Previous buttons, it has a fixed value of 3 for esthetic purpose*@
            int tempMaxPage = ViewBag.MaxPage < 3 ? ViewBag.MaxPage : 3;

            if (ViewBag.PageNumber == ViewBag.MaxPage && ViewBag.PageNumber > 2)
            {
                counter--;
            }

            @*This part creates ... button that leads to the last page in pagination*@
            if (counter > 1)
            {
                <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">...</a></li>
            }

            for (int i = 0; i < tempMaxPage; i++)
            {
                if (ViewBag.PageNumber == counter)
                {
                    <li class="page-item active"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = @counter, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">@counter</a></li>
                }
                else
                {
                    <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = @counter, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">@counter</a></li>
                }

                counter++;
            }

            @*This part creates ... button that leads to the first page in pagination*@
            if (counter - 1 < ViewBag.MaxPage && ViewBag.MaxPage > 2)
            {
                <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.MaxPage, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">...</a></li>
            }
        }

        @*This part creates Next button if the current page is not the last page on pagination*@
        @if (ViewBag.PageNumber < ViewBag.MaxPage)
        {
            <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber + 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">Next</a></li>
        }
        else
        {
            <li class="page-item disabled"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber + 1, rowsCount = ViewBag.RowsCount, filterOn = ViewBag.FilterOn })">Next</a></li>
        }
    </ul>
</nav>