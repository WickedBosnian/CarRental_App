@model IEnumerable<CarRental_DTO.ClientDTO>

@{
    ViewData["Title"] = "Clients";
    CarRental_DTO.ClientDTO? FilterClient = (CarRental_DTO.ClientDTO?)ViewData["FilterClient"];
}
<p>
    <a asp-action="Create" class="btn btn-outline-primary">Create New</a>
</p>

@*Form for searching Clients*@
<form asp-controller="Client" asp-action="SearchClient" method="get">
        <div class="input-group">

            <input id="firstname" name="Firstname" value="@FilterClient?.Firstname" type="text" class="form-control rounded" style="margin:5px;" placeholder="Firstname" aria-label="Search" aria-describedby="search-addon" />
            <input id="lastname" name="Lastname" value="@FilterClient?.Lastname" type="text" class="form-control rounded" style="margin:5px;" placeholder="Lastname" aria-label="Search" aria-describedby="search-addon" />
            <input id="birthdate" name="Birthdate" value="@FilterClient?.Birthdate?.ToString("yyyy-MM-dd")" type="date" class="form-control rounded" style="margin:5px;" placeholder="Birthdate" aria-label="Birthdate" aria-describedby="search-addon" />

            <select id="gender" name="Gender" class="form-select form-control rounded" style="margin:5px;">
                <option selected value="">Gender</option>
                @if (FilterClient?.Gender == "M")
                {
                    <option selected value="M">Male</option>
                }else
                {
                    <option value="M">Male</option>
                }
                @if (FilterClient?.Gender == "F")
                {
                    <option selected value="F">Female</option>
                }else
                {
                    <option value="F">Female</option>
                }
            </select>

            <input id="driverLicenceNumber" name="DriverLicenceNumber" value="@FilterClient?.DriverLicenceNumber" type="text" class="form-control rounded" style="margin:5px;" placeholder="Driver Licence Number" aria-label="Search" aria-describedby="search-addon" />

            <button type="submit" class="btn btn-outline-primary" value="firstname">Search</button>
        </div>
</form>
<table class="table align-middle mb-0 bg-white table-hover">
    <thead class="bg-light">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Firstname)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Lastname)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Birthdate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Gender)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DriverLicenceNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PersonalIdcardNumber)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Firstname)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Lastname)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Birthdate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Gender)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DriverLicenceNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PersonalIdcardNumber)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.ClientId" class="btn btn-outline-warning">Edit</a>
                <a asp-action="Details" asp-route-id="@item.ClientId" class="btn btn-outline-info">Details</a>
                <a asp-action="Delete" asp-route-id="@item.ClientId" class="btn btn-outline-danger">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

@*Pagination*@
<nav aria-label="Page navigation example" style="margin-top:10px;">
    <ul class="pagination justify-content-center">
        @*ActionName is used as a parameter that holds name of the Action that is called in current Controller*@
        @{
            string ActionName = "Index";
        }
        @*This part creates Previous button if the current page is not the first page on pagination*@
        @if (ViewBag.PageNumber > 1)
        {
            <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber - 1, clientsCount = ViewBag.ClientsCount, filterOn = ViewBag.FilterOn })" tabindex="-1">Previous</a></li>
        }else{
            <li class="page-item disabled"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber - 1, clientsCount = ViewBag.ClientsCount, filterOn = ViewBag.FilterOn })" tabindex="-1">Previous</a></li>
        }

        @*This section creates page numbers for pagination between Next and Previous buttons as well as buttons ... that lead to the first or last page in pagination*@
        @{
            @*counter is a variable that is used as a page number, it is always smaller than the current page unless the current page is 1*@
            int counter = ViewBag.PageNumber > 1 ? ViewBag.PageNumber - 1 : ViewBag.PageNumber;

            @*tempMaxPage holds a value of how much page numbers are displayed between Next and Previous buttons, it has a fixed value of 3 for esthetic purpose*@
            int tempMaxPage = ViewBag.MaxPage < 3 ? ViewBag.MaxPage : 3;

            if (ViewBag.PageNumber == ViewBag.MaxPage && ViewBag.PageNumber > 2)
            {
                counter--;
            }

            @*This part creates ... button that leads to the last page in pagination*@
            if (counter > 1)
            {
                <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = 1, clientsCount = ViewBag.ClientsCount, filterOn = ViewBag.FilterOn })">...</a></li>
            }

            for (int i = 0; i < tempMaxPage; i++)
            {
                if (ViewBag.PageNumber == counter)
                {
                    <li class="page-item active"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = @counter, clientsCount = ViewBag.ClientsCount, filterOn = ViewBag.FilterOn })">@counter</a></li>
                }else
                {
                    <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = @counter, clientsCount = ViewBag.ClientsCount, filterOn = ViewBag.FilterOn })">@counter</a></li>
                }
                
                counter++;
            }

            @*This part creates ... button that leads to the first page in pagination*@
            if (counter - 1 < ViewBag.MaxPage && ViewBag.MaxPage > 2)
            {
                <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.MaxPage, clientsCount = ViewBag.ClientsCount, filterOn = ViewBag.FilterOn })">...</a></li>
            }
        }

        @*This part creates Next button if the current page is not the last page on pagination*@
        @if (ViewBag.PageNumber < ViewBag.MaxPage)
        {
            <li class="page-item"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber + 1, clientsCount = ViewBag.ClientsCount, filterOn = ViewBag.FilterOn })">Next</a></li>
        }else{
            <li class="page-item disabled"><a class="page-link" href="@Url.Action(ActionName, new { pageNumber = ViewBag.PageNumber + 1, clientsCount = ViewBag.ClientsCount, filterOn = ViewBag.FilterOn })">Next</a></li>
        }
    </ul>
</nav>